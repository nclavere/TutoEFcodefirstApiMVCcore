// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModelFilms.Context;

#nullable disable

namespace ModelFilms.Migrations
{
    [DbContext(typeof(FilmsDbContext))]
    partial class FilmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActeurFilm", b =>
                {
                    b.Property<int>("ActeursId")
                        .HasColumnType("int");

                    b.Property<int>("FilmsId")
                        .HasColumnType("int");

                    b.HasKey("ActeursId", "FilmsId");

                    b.HasIndex("FilmsId");

                    b.ToTable("ActeurFilm");
                });

            modelBuilder.Entity("ModelFilms.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("RealisateurId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("resume")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("RealisateurId");

                    b.ToTable("Films");
                });

            modelBuilder.Entity("ModelFilms.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("ModelFilms.Entities.Personne", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Personnes");

                    b.HasDiscriminator().HasValue("Personne");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ModelFilms.Entities.Acteur", b =>
                {
                    b.HasBaseType("ModelFilms.Entities.Personne");

                    b.HasDiscriminator().HasValue("Acteur");
                });

            modelBuilder.Entity("ModelFilms.Entities.Realisateur", b =>
                {
                    b.HasBaseType("ModelFilms.Entities.Personne");

                    b.HasDiscriminator().HasValue("Realisateur");
                });

            modelBuilder.Entity("ActeurFilm", b =>
                {
                    b.HasOne("ModelFilms.Entities.Acteur", null)
                        .WithMany()
                        .HasForeignKey("ActeursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModelFilms.Entities.Film", null)
                        .WithMany()
                        .HasForeignKey("FilmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelFilms.Entities.Film", b =>
                {
                    b.HasOne("ModelFilms.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ModelFilms.Entities.Realisateur", "Realisateur")
                        .WithMany()
                        .HasForeignKey("RealisateurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Realisateur");
                });
#pragma warning restore 612, 618
        }
    }
}
